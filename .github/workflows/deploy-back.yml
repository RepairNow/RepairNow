name: Deploy Back

on:
  push:
    branches:
      - websocket

env:
  GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_CLUSTER_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  push-api-gateway-image:
    name: Push Api Gateway Image to Docker Hub
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Push Api Gateway Image to Docker Hub
        uses: ./.github/actions/push-img-to-dockerhub
        with:
          microservice: api-gateway
          config: |
            API_GATEWAY_PORT=3000
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            AUTH_HOST=auth-svc
            AUTH_PORT=3001
            JOB_HOST=job-svc
            JOB_PORT=3002
            MISSION_HOST=mission-svc
            MISSION_PORT=3003

  push-auth-image:
    name: Push Auth Image to Docker Hub
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Push Auth Image to Docker Hub
        uses: ./.github/actions/push-img-to-dockerhub
        with:
          microservice: auth
          config: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            AUTH_PORT=3001
            TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}
            TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}
            TWILIO_VERIFICATION_SERVICE_SID=${{ secrets.TWILIO_VERIFICATION_SERVICE_SID }}
            TWILIO_SENDER_PHONE_NUMBER=''

  push-job-image:
    name: Push Job Image to Docker Hub
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Push Job Image to Docker Hub
        uses: ./.github/actions/push-img-to-dockerhub
        with:
          microservice: job
          config: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JOB_PORT=3002

  push-mission-image:
    name: Push Mission Image to Docker Hub
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Push Mission Image to Docker Hub
        uses: ./.github/actions/push-img-to-dockerhub
        with:
          microservice: mission
          config: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            MISSION_PORT=3003
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_CHECKOUT_SUCCESS_URL=https://amazon.com
            STRIPE_CHECKOUT_CANCEL_URL=https://about.meta.com/fr/

  push-com-gateway-image:
    name: Push Com Gateway Image to Docker Hub
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Push Com Gateway Image to Docker Hub
        uses: ./.github/actions/push-img-to-dockerhub
        with:
          microservice: com-gateway
          config: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            COM_PORT=3005
            COM_DB=${{ secrets.COM_DB }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}

  deploy-to-gke:
    name: Deploy microservices to GKE
    runs-on: ubuntu-latest
    environment: production
    if: "!failure()"
    needs: [push-api-gateway-image, push-auth-image, push-job-image, push-mission-image, push-com-gateway-image]


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          credentials_json: ${{ env.GKE_SA_KEY }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.GKE_CLUSTER_ZONE }}


      - name: Deploy microservices to GKE cluster
        shell: bash
        run: |
          helm upgrade repair-now ./k8s/repair-now \
          --set GITHUB_SHA=${{ github.sha }} \
          --set DOCKER_HUB_USERNAME=${{ env.DOCKER_HUB_USERNAME }} \
          --install \