name: Deploy Back

on:
  push:
    branches:
      - 'feature/docker-hub'
    paths:
      - 'apps/back/**'
      - '.github/**'

env:
  GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_CLUSTER_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  # JOB to run change detection
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find changed files
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: Set output
        id: set-output
        run: |
          # Récupérer les fichiers modifiés depuis la sortie de l'étape
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"

          # Liste des dossiers à vérifier
          folder_to_check=("apps/back/api-gateway" "apps/back/auth")

          # Liste des dossiers modifiés
          changed=()

          # Parcourir les dossiers à vérifier
          for folder in "${folder_to_check[@]}"; do
            # Filtrer les fichiers modifiés en fonction du chemin du dossier
            filtered_files=$(echo "$changed_files" | grep "^$folder")
            # Vérifier si des fichiers modifiés ont été trouvés
            if [[ -n "$filtered_files" ]]; then
              changed+=("$folder")
              # Décommentez la ligne suivante si vous souhaitez afficher les fichiers modifiés pour chaque dossier
              # echo "$filtered_files" | while IFS= read -r file; do echo "Fichier modifié : $file"; done
            fi
          done

          # Afficher les dossiers modifiés
          for folder in "${changed[@]}"; do
            echo "Dossier modifié : $folder"
          done

          # Définir la sortie test avec les dossiers modifiés
          echo "::set-output name=test::${changed[*]}"


      - name: Read output
        run: |
          echo "Changed folders: ${{ steps.set-output.outputs.test }}"

    # steps:
    #   # For pull requests it's not necessary to checkout the code
    #   - name: Checkout
    #     if: github.event_name != 'pull_request'
    #     uses: actions/checkout@v3

    #   - uses: dorny/paths-filter@v2
    #     id: filter
    #     with:
    #       filters: |
    #         api-gateway:
    #           - './apps/back/api-gateway/**'
    #         auth:
    #           - './apps/back/auth/**'

  # deploy-api-gateway:
  #   name: Deploy Api Gateway
  #   runs-on: ubuntu-latest
  #   environment: production
  #   needs: detect-changes
  #   if: ${{ needs.detect-changes.outputs.api-gateway == 'true' }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Deploy Api Gateway
  #       uses: ./.github/actions/deploy-microservice
  #       with:
  #         microservice: api-gateway
  #         config: |
  #           API_GATEWAY_PORT=3000
  #           JWT_SECRET=${{ secrets.JWT_SECRET }}
  #           AUTH_HOST=auth-svc
  #           AUTH_PORT=3001

  # deploy-auth:
  #   name: Deploy Auth
  #   runs-on: ubuntu-latest
  #   environment: production
  #   needs: detect-changes
  #   if: ${{ needs.detect-changes.outputs.auth == 'true' }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Deploy Auth
  #       uses: ./.github/actions/deploy-microservice
  #       with:
  #         microservice: auth
  #         config: |
  #           DATABASE_URL=${{ secrets.DATABASE_URL }}
  #           JWT_SECRET=${{ secrets.JWT_SECRET }}
  #           AUTH_PORT=3001