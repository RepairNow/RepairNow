// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(uuid()) @db.Uuid
  email                   String         @unique
  password                String
  role                    String         @default("CLIENT")
  phoneNumber             String
  firstname               String
  lastname                String
  resetPasswordToken      String         @default(uuid())
  isContractorRoleAsked   Boolean        @default(false)
  isUserDeleted           Boolean        @default(false)
  isEmailVerified         Boolean        @default(false)
  isPhoneVerified         Boolean        @default(false)
  refreshToken            String?         
  avatar                  String?
  birthdate               DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @default(now()) @updatedAt
  wallet                  Wallet?       
  jobs                    Job[]          
  notifications           Notification[]
  estimates               Estimate[]  
  partnerships            Partnership[]  
  announcements           Announcement[] 
  messages                Message[]     
  missions                Mission[]      
  geolocation             Geolocation[]

  @@map(name: "u_user")
}

model Wallet {
  id                String              @id @default(uuid()) @db.Uuid
  amount            String
  user              User                @relation(fields: [userId], references: [id])
  userId            String              @unique @db.Uuid
  walletTransaction WalletTransaction[] 

  @@map(name: "u_wallet")
}

model WalletTransaction {
  id             String  @id @default(uuid()) @db.Uuid
  currentStatus  Boolean
  validationCode Int
  mission        Mission @relation(fields: [missionId], references: [id])
  missionId      String  @unique @db.Uuid
  wallet         Wallet  @relation(fields: [walletId], references: [id])
  walletId       String  @db.Uuid

  @@map(name: "u_wallet_transaction")
}

model Notification {
  id      String @id @default(uuid()) @db.Uuid
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.Uuid
  title   String
  content String

  @@map(name: "u_notification")
}

model Partnership {
  id     String @id @default(uuid()) @db.Uuid
  title  String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@map(name: "u_partnership")
}

model Job {
  id    String @id @default(uuid()) @db.Uuid
  title String @unique
  users User[] 

  @@map(name: "j_job")
}

model Announcement {
  id          String       @id @default(uuid()) @db.Uuid
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.Uuid
  title       String
  description String
  images      String[]
  address     String
  startTime   DateTime     @default(now())
  endTime     DateTime     @default(now())
  mission     Mission?     
  estimates   Estimate[]
  currentStatus  String   
  acceptedAt  DateTime     @default("1970-01-01T00:00:00Z")

  @@map(name: "m_announcement")
}

model Estimate {
  id             String       @id @default(uuid()) @db.Uuid
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  announcementId String       @db.Uuid
  prestataire    User         @relation(fields: [prestataireId], references: [id])
  prestataireId  String       @db.Uuid
  price          Float
  description    String
  images         String[]
  currentStatus         String

  @@map(name: "m_estimation")
}

model Chat {
  id      String    @id @default(uuid()) @db.Uuid
  currentStatus  Boolean
  Message Message[]

  @@map(name: "m_chat")
}

model Message {
  id       String  @id @default(uuid()) @db.Uuid
  message  String
  sender   User    @relation(fields: [senderId], references: [id])
  senderId String  @db.Uuid
  chat     Chat    @relation(fields: [chatId], references: [id])
  chatId   String  @db.Uuid
  read     Boolean

  @@map(name: "m_message")
}

model Mission {
  id                String             @id @default(uuid()) @db.Uuid
  prestataire       User               @relation(fields: [prestataireId], references: [id])
  prestataireId     String             @db.Uuid
  announcement      Announcement       @relation(fields: [announcementId], references: [id])
  announcementId    String             @unique @db.Uuid
  currentStatus     String
  walletTransaction WalletTransaction? 
  review            Review[]
  geolocation       Geolocation?
  validationCode    ValidationCode?

  @@map(name: "m_mission")
}

model Review {
  id        String  @id @default(uuid()) @db.Uuid
  rating    Int
  comment   String
  mission   Mission @relation(fields: [missionId], references: [id])
  missionId String  @unique @db.Uuid

  @@map(name: "m_review")
}

model Geolocation {
  id             String       @id @default(uuid()) @db.Uuid
  x              Float
  y              Float
  z              Float
  mission        Mission      @relation(fields: [missionId], references: [id])
  missionId      String       @unique @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid

  @@map(name: "m_geolocation")
}

model ValidationCode {
  id              String    @id @default(uuid()) @db.Uuid
  mission         Mission   @relation(fields: [missionId], references: [id])
  missionId       String    @unique @db.Uuid
  code            Float
  currentStatus   String    @default("PENDING")

  @@map(name: "m_validation_code")
}
